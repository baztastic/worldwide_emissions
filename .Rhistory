# join_waves <- parse_new_protocol_joined(joinedDate="20190509", joinedPreString="joined_test_")
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
# waves_subset <- subset(merge_waves, merge_waves$feeder == 22)
#############################
as <- parse_all_stats(waveDate="20190517", preString="all_stats_")
as$time_and_date <- with_tz(as$time_and_date, "Europe/Dublin")
as <- as[as$feeder != 4,]
as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
asPlot <- ggplot(as, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() #+ scale_x_datetime(date_breaks = '10 min')
# ggplotly(ggplot(as, aes(time_and_date, power_factor)) + geom_point(aes(color=feeder)) + geom_line(aes(color=feeder)) + theme_bw())
#############################
## sequentially plot each wave
# apply(waves_subset, 1, find_power_factor, plotFits=T, pause=T, ret=F)
# apply(anoms, 1, plot_full_waveform, pause=T)
### richDf contains mainly numerical derived values, without full waves etc
### can now extract data from events without waves too - filter on richDf$hasWave==T to remove
waves_subset <- merge_waves
richDf <- create_blank_rich_df()
for (i in seq(nrow(waves_subset))) {
a <- waves_subset[i,]
richDf <- extract_rich_data(a, richTest, p=F)
}
# rich_subset <- subset(richDf, richDf$feeder==23)
# ggplotly(ggplot(richDf, aes(event_time, inew, label=as.character(uid))) + geom_point(aes(color=pf)) + theme_bw() + geom_hline(yintercept = 0))
richPlot <- ggplot(richDf, aes(event_time, inew)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
waves_subset <- merge_waves
richDf <- create_blank_rich_df()
for (i in seq(nrow(waves_subset))) {
a <- waves_subset[i,]
richDf <- extract_rich_data(a, richDf, p=F)
}
# rich_subset <- subset(richDf, richDf$feeder==23)
# ggplotly(ggplot(richDf, aes(event_time, inew, label=as.character(uid))) + geom_point(aes(color=pf)) + theme_bw() + geom_hline(yintercept = 0))
richPlot <- ggplot(richDf, aes(event_time, inew)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
richPlot <- ggplot(richDf, aes(event_time, trigger)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
ggplotly(richPlot)
nrow(richPlot)
nrow(richDf)
asPlot <- ggplot(as, aes(time_and_date, voltage_average)) + geom_line(aes(color=feeder)) + theme_bw() #+ scale_x_datetime(date_breaks = '10 min')
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
asPlot <- ggplot(as, aes(time_and_date, power_factor)) + geom_line(aes(color=feeder)) + theme_bw() #+ scale_x_datetime(date_breaks = '10 min')
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
richPlot <- ggplot(richDf, aes(event_time, pfnew)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
ggplotly(richPlot)
colnames(richDf)
richPlot <- ggplot(richDf, aes(event_time, onOffSign)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
summary(richDf$onOff)
893/(893+3119)
3119/(893+3119)
richPlot <- ggplot(richDf, aes(event_time, rsquaredI)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
asPlot <- ggplot(as, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() #+ scale_x_datetime(date_breaks = '10 min')
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
richPlot <- ggplot(richDf, aes(event_time, thd)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
summary(richDf$thd)
rich_subset <- subset(richDf, richDf$thd<=50)
richPlot <- ggplot(rich_subset, aes(event_time, thd)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
getw()
getwd()
source('~/wave-parsing/working_with_new_protocol.R')
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
ggplotly(asPlot)
feeders <- read.csv('feeders.csv')
source('~/wave-parsing/working_with_new_protocol.R')
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==2,]
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() #+ scale_x_datetime(date_breaks = '10 min')
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '30 min')
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==1,]
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==3,]
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==1,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==2,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
# waves_subset <- subset(merge_waves, merge_waves$feeder == 22)
#############################
as <- parse_all_stats(waveDate="20190517", preString="all_stats_")
as$time_and_date <- with_tz(as$time_and_date, "Europe/Dublin")
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==2,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
waves_subset <- merge_waves
asPlot <- ggplot(as_subset, aes(time_and_date, max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==1,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0 & as$feeder==23,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0 & as$feeder==23,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
as$feeder
as$feeder==23
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0 | as$feeder==23,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_average)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
asPlot <- ggplot(as_subset, aes(time_and_date, current_min)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
waves_subset <- merge_waves
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_min)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==3,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_min)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
rich_subset <- richDf
colnames(richDf)
richPlot <- ggplot(rich_subset, aes(event_time, hasWave)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
plot_grid(asPlot, richPlot, ncol=1, align="v")
rich_subset <- subset(richDf, richDf$phase==2)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplot(richPlot)
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==2 & richDf$feeder!=22)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
waves_subset <- subset(merge_waves, merge_waves$phase==2 & merge_waves$feeder!=22)
# ggplotly(ggplot(as, aes(time_and_date, power_factor)) + geom_point(aes(color=feeder)) + geom_line(aes(color=feeder)) + theme_bw())
#############################
## sequentially plot each wave
apply(waves_subset, 1, find_power_factor, plotFits=T, pause=T, ret=F)
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
waves_subset <- subset(merge_waves, merge_waves$phase==1 & merge_waves$feeder!=22)
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
waves_subset <- subset(merge_waves, merge_waves$phase==2 & merge_waves$feeder!=22)
rich_subset <- subset(richDf, richDf$phase==1 & richDf$feeder!=22)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==1 & richDf$feeder!=24)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==1 & richDf$feeder!=24 & richDf$feeder!=20)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==3 & richDf$feeder!=24 & richDf$feeder!=20)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==3 & richDf$feeder!=21 & richDf$feeder!=20)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==3 & richDf$feeder!=21 & richDf$feeder!=23)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$meter==1)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$meter==2)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$meter==3)
richPlot <- ggplot(rich_subset, aes(event_time, irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
richPlot <- ggplot(rich_subset, aes(event_time, onOffSign* irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
rich_subset <- subset(richDf, richDf$phase==3 & richDf$feeder!=21 & richDf$feeder!=23)
richPlot <- ggplot(rich_subset, aes(event_time, onOffSign* irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==0,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_min)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
source('~/wave-parsing/new_protocol_functions.R')
# ggplotly(ggplot(as, aes(time_and_date, power_factor)) + geom_point(aes(color=feeder)) + geom_line(aes(color=feeder)) + theme_bw())
#############################
## sequentially plot each wave
apply(waves_subset, 1, find_power_factor, plotFits=T, pause=T, ret=F)
nrow(merge_waves[merge_waves$feeder==23,])
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==2,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
summary(as[as$feeder==22, 'current_max'])
summary(as[as$feeder==5, 'current_max'])
summary(as[as$feeder==5, 'current_max'])/summary(as[as$feeder==22, 'current_max'])
plot((as[as$feeder==5, 'current_max'])/(as[as$feeder==22, 'current_max']))
plot((as[as$feeder==5, 'current_max'])/(as[as$feeder==6, 'current_max']))
plot((as[as$feeder==5, 'current_max'])/(as[as$feeder==10, 'current_max']))
plot((as[as$feeder==5, 'current_max'])/(as[as$feeder==12, 'current_max']))
median(as[as$feeder==5, 'current_max'])
median(as[as$feeder==1, 'current_max'])
median(as[as$feeder==2, 'current_max'])
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==2,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==1,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as[as$phase==3,]
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
rich_subset <- subset(richDf, richDf$phase==3 & richDf$feeder!=21 & richDf$feeder!=23)
richPlot <- ggplot(rich_subset, aes(event_time, onOffSign* irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
test_waves <- parse_new_protocol(waveDate="20190517", wavesPreString="waves_test_", eventsPreString="events_test_")
waves_subset <- test_waves
richDf <- create_blank_rich_df()
for (i in seq(nrow(waves_subset))) {
a <- waves_subset[i,]
richDf <- extract_rich_data(a, richDf, p=F)
}
rich_subset <- richDf
richPlot <- ggplot(rich_subset, aes(event_time, onOffSign* irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
# eventPlot <- ggplot(merge_waves, aes(with_tz(event_time, "Europe/Dublin"), trigger)) + geom_point(aes(color=feeder), alpha=0.5) + scale_x_datetime(date_breaks = '2 hours')# + geom_line() + theme_bw() #+ geom_hline(yintercept = 0)
ggplotly(richPlot)
merge_waves <- parse_new_protocol(waveDate="20190521", wavesPreString="waves_", eventsPreString="events_")
merge_waves$event_time <- with_tz(merge_waves$event_time, "Europe/Dublin")
# waves_subset <- subset(merge_waves, !is.na(merge_waves$wave_time))  ## selects only those with waves
# waves_subset <- subset(merge_waves, merge_waves$phase==2 & merge_waves$feeder!=22)
#############################
as <- parse_all_stats(waveDate="20190521", preString="all_stats_")
as$time_and_date <- with_tz(as$time_and_date, "Europe/Dublin")
# as <- as[as$feeder != 4,]
# as <- as[as$phase != 0,]
# as_test <- parse_all_stats(waveDate="20190516", preString="all_stats_test_")
# as_test <- as_test[as_test$time_and_date >= min(test_waves$event_time) & as_test$time_and_date <= max(test_waves$event_time),]
# l1 <- as[as$phase != 1,]
# l2 <- as[as$phase != 2,]
# l3 <- as[as$phase != 3,]
as_subset <- as
asPlot <- ggplot(as_subset, aes(time_and_date, current_max)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
waves_subset <- merge_waves
richDf <- create_blank_rich_df()
for (i in seq(nrow(waves_subset))) {
a <- waves_subset[i,]
richDf <- extract_rich_data(a, richDf, p=F)
}
asPlot <- ggplot(as_subset, aes(time_and_date, real_power)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rich_subset <- richDf
richPlot <- ggplot(rich_subset, aes(event_time, onOffSign* irms)) + geom_point(aes(color=feeder, size=rsquaredI), alpha=0.5) + geom_hline(yintercept = 0) #+ scale_y_datetime(limits = c(min(as$time_and_date), max(as$time_and_date)))
plot_grid(asPlot, richPlot, ncol=1, align="v")
summary(richDf$feeder)
100*summary(richDf$feeder)/nrow(richDf)
richWaves <- subset(richDf, richDf$hasWave==T)
richOff <- convert_rich_to_numeric(richWaves, "off")
richOn  <- convert_rich_to_numeric(richWaves, "on")
richNum <- convert_rich_to_numeric(richWaves)
summary(richDf$hasWave)
richWaves <- subset(richDf, richDf$hasWave==T)
richOff <- convert_rich_to_numeric(richWaves, "off")
richOn  <- convert_rich_to_numeric(richWaves, "on")
richNum <- convert_rich_to_numeric(richWaves)
clusters <- kmeans(richOn[,2:34], 20)
set.seed(20)
clusters <- kmeans(richOn[,2:34], 20)
clusters <- kmeans(richOn[,2:34], 10)
clusters <- kmeans(richOn[,2:34], 25)
clusters <- kmeans(richOn[,2:34], 15)
clusters <- kmeans(richOn[,2:34], 19)
richOn$cluster <- as.factor(clusters$cluster)
ggplotly(ggplot(subset(richOn, richOn$uid > 13000000), aes(uid, inew)) + geom_point(aes(color=cluster)))
ggplotly(asPlot)
summary(richDf$onOff)
ggplotly(ggplot(subset(richOn, richOn$uid > 13000000), aes(uid, inew)) + geom_point(aes(color=cluster)))
asPlot <- ggplot(as_subset, aes(time_and_date, power_factor)) + geom_line(aes(color=feeder)) + theme_bw() + scale_x_datetime(date_breaks = '1 hour')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(asPlot)
plot_grid(asPlot, richPlot, ncol=1, align="v")
## https://informationisbeautiful.net/visualizations/how-to-reduce-the-worlds-carbon-footprint-by-2050/
library(stringr)
library(ggplot2)
raw_sector <- read.csv("energy_by_sector.csv")
raw_totals <- read.csv("total_worldwide_emissions.csv")
sector <- raw_sector
totals <- raw_totals
sector <- setNames(data.frame(sector$Sector, sector$Baseline.Annual.Emissions), c("Sector", "Emissions"))
sector <- sector[2:7,]
rownames(sector) <- 1:6
sector$Emissions <- as.numeric(as.character(sector$Emissions))
totals <- setNames(data.frame(totals$Note..data.from.2012, totals$percent.total.GHGs, totals$GHGs..MtCO2.eq.), c("Sector", "Percent", "Emissions"))
totals$Emissions <- gsub(",", "", as.character(totals$Emissions))
totals$Emissions <- as.numeric(totals$Emissions)
totals$Sector <- gsub("-", "", totals$Sector)
category <- c("Industry", "Industry", "Industry", "Industry", "Industry", "Industry", "Industry", "Industry", "Buildings", "Buildings", "Buildings", "Transport", "Transport", "Transport", "Transport", "Transport", "Agriculture Forestry and Land Use", "Agriculture Forestry and Land Use", "Agriculture Forestry and Land Use", "Agriculture Forestry and Land Use", "Agriculture Forestry and Land Use", "Agriculture Forestry and Land Use", "Landfills and Waste Water", "Landfills and Waste Water", "Landfills and Waste Water", "Other Energy", "Other Energy", "Other Energy", "Other Energy")
totals$Category <- category
totals$Category <- factor(totals$Category)
rem <- c(1, 9, 12, 17, 23, 26)
breakdown <- totals[!(seq(1,29) %in% rem),]
rownames(breakdown) <- seq(1,23)
breakdown$Sector <- str_to_title(breakdown$Sector)
breakdown[breakdown$Sector =="Oil And Gas Extraction. Refining And Processing","Sector"] <- "Oil And Gas Extraction, Refining And Processing"
ggplot(breakdown, aes(reorder(Sector, -Emissions), Percent)) +
geom_bar(stat="identity",aes(fill=Category)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label=Sector),
angle=90,
hjust = 1.1,
color = "white",
size = 3,
fontface="bold")
ggplot(sector, aes(reorder(Sector, -Emissions), Emissions)) + geom_bar(stat="identity",aes(fill=Sector)) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(breakdown, aes(reorder(Sector, -Emissions), Percent)) +
geom_bar(stat="identity",aes(fill=Category)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label=Sector),
angle=90,
hjust = 1.1,
color = "white",
size = 3,
fontface="bold")
